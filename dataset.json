["def encrypt(string, key):\n    str = [(ord(chr) - ord('A') + key) % 26 + ord('A') if chr.isupper() == 1\n        else (ord(chr) - ord('a') + key) % 26 + ord('a') if chr.islower() else ord(chr) for chr in string]\n    print(str)\n    return ''.join([chr(ch) for ch in str])", "def check_prime(x):\n        if (x < 2):\n            return False\n        if (x == 2):\n             return True\n        for k in range(3, int(math.sqrt(x)), 2):\n            if x % k == 0:\n                return False \n        return True", "for word in content.split(' '):\n    word = ''.join([ch for ch in word if ch.isalpha()])\n    freq[word] = freq.get(word,  0) + 1", "@app.route(\"/\")\n    def index(name=None):\n    return render_template(\"initial_design.html\", name=name)", "@app.route(\"/login\", methods=[\"GET\", \"POST\"])\ndef login():\n    error_msg = \"\"\n    if request.method == \"POST\":\n        username = request.form.get(\"username\", \"\")\n        password = request.form.get(\"password\", \"\")\n        # TODO: verify credentials and set the session dict\n        if username in ALLOWED_USERS and password == ALLOWED_USERS[username]:\n            session['authenticated'] = True\n            session[\"username\"] = username\n        \n    return render_template(\"login.html\", error_msg=error_msg)", "@app.errorhandler(404)\ndef error404(code):\n    # TODO_bonus: make it show a fancy HTTP 404 error page, with red background and bold message ;) \n    return 'HTTP Error 404 - Page Not Found'", "return {\n        \"username\": session[\"username\"],\n        \"is_auth\": session[\"authenticated\"],\n        \"categories\": thumbimg.keys(),\n        \"images\": {cat:zip(imagespercat[cat], thumbimg[cat]) for cat in thumbimg}\n    }", "imagespercat = {}\n    with open(DATABASE_FILE, 'rb') as inp:\n        imagespercat = pickle.load(inp)\n    return imagespercat", "model = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Dense(5))\nmodel.add(tf.keras.layers.Dense(10000, activation='relu'))\nmodel.add(tf.keras.layers.Dense(1000, activation='relu'))\nmodel.add(tf.keras.layers.Dense(1))\nloss_fn = tf.keras.losses.MeanAbsoluteError()\nmodel.compile(optimizer='adam', loss=loss_fn)", "for file in os.listdir(srcPath):\n    if os.path.isfile(srcPath + file):\n        if not os.path.isdir(srcPath + file[:file.rfind(\".\")]):\n            os.mkdir(srcPath + file[:file.rfind(\".\")])\n        shutil.move(srcPath + file, srcPath + file[:file.rfind(\".\")] + \"\\\" + file)", "def LoadData(self):\n        try:\n            file = open(os.path.join(__location__, 'save.model'), \"rb\")\n            (self.weights, self.biases) = pickle.load(file)\n        except:\n            print(\"No file found!\")\n            self.defaultInit()", "window = Tk()\n    window.geometry('400x180')\n    window.geometry(\"+550+300\")\n    window.title(\"Path Visualization\")\n    lb = Label(window, text=\"How big do you want the matrix to be?\", font=(\"Arial\", 13))\n    lb.place(relx=0.5, rely=0.04, anchor=N)", "while running and Q and not found:\n        \n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                running = False\n        \n        if not found: \n            x, y = Q.pop()", "def valid(x, y, value, matrix):\n\n    for i in range(9):\n        if (matrix[x][i] == value or matrix[i][y] == value) and i != x and i != y:\n            return False\n\n    p_x = ((x // 3) * 3)\n    p_y = ((y // 3) * 3)\n\n    for i in range(p_x, p_x + 3):\n        for j in range(p_y, p_y + 3):\n            if matrix[i][j] == value and (i != x or j != y):\n                return False\n\n    return True", "def SudokuSolver(pos, R, lenR, matrix):\n\n    if (pos >= lenR):\n        return True\n\n    x = R[pos][0]\n    y = R[pos][1]\n\n    for i in range(1, 10):\n        if valid(x, y, i, matrix):\n\n            matrix[x][y] = i\n\n            if (SudokuSolver(pos + 1, R, lenR, matrix)):\n                return True\n\n            matrix[x][y] = 0\n\n    return False", "for i in range(1, 850):\n    element = driver.find_element_by_xpath(pattern.format(miau=str(i)))\n    hover = ActionChains(driver).move_to_element(element)\n    hover.perform()\n    input('d')\n    driver.execute_script(\"window.scrollBy(0,125)\")\n    input('d')", "msg_box = driver.find_element_by_class_name('_3uMse')\nfor i in range(no_of_times):\n    msg_box.send_keys(msg)\n    button = driver.find_element_by_class_name('_1U1xa')\n    button.click()", "def reverse_string(s):\n    return s[::-1]", "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)", "def count_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    return sum(1 for char in s if char in vowels)", "def find_max(lst):\n    if not lst:\n        return None\n    max_value = lst[0]\n    for num in lst:\n        if num > max_value:\n            max_value = num\n    return max_value", "def celsius_to_fahrenheit(c):\n    return (c * 9/5) + 32\nprint(celsius_to_fahrenheit(25))", "def is_palindrome(s):\n    s = s.lower().replace(\" \", \"\")\n    return s == s[::-1]", "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "def fibonacci(n):\n    fib_seq = [0, 1]\n    for i in range(2, n):\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return fib_seq[:n]", "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list", "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(abs(n)))", "def remove_duplicates(lst):\n    return list(set(lst))\n    print(remove_duplicates([1, 2, 2, 3, 4, 4, 5]))", "def is_leap_year(year):\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n    print(is_leap_year(2024))", "def second_largest(lst):\n    unique_lst = list(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    unique_lst.sort(reverse=True)\n    return unique_lst[1]"]